pragma solidity ^0.4.19;
/*
-------Level Two--- 
Problems with Level One were:
1, Customer can shortpay.
2, Customer can rob bank.
3, Customer can cut price.
So introduce some Ownership controls here
                      *****  CKTTY   gLITTER (Level Two)  ****** (CKL) 
 If you own a CK or especially if you have more than one,  
 we're here to help!  Buy a Bag or two or more. This is a 1 product test store. We only sell imaginary 10 lb bags of CKL.
just a Solidity exercise for test network use only. Switch among accounts to test all.
  don' forget to enter ETH VALUE to make contract balance change
  Think I need the hitmes to keep button open and interactive.Live 
  with the yellow unused errors, still works.
 */ 
 

// --------------------------------------------------main Contract
contract gLitterFactory {
    uint pricePerBag = 10;
    uint bagsBought;
    uint purchaseCost;
    uint bagsSold;
    uint totalSpent;
      
  mapping (address => uint) balance;
     //  --------------------------V----------------------ownable bitz

   address public owner;
   function gLitterFactory() public {
    owner = msg.sender;
  }
  // Throws if called by any account other than the owner.
     modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

//-----------------------------------------------------make a purchase
// should be sending(entering)  1 ETH per bag ordered. 
//Honor system - this version . No money sent check    
    //No customer has money check.  or Ownership of Bank check
  //-------------------------------------------------------MAIN----
  function BUYaBAG(uint purchaseQuantity) public payable returns (bool){

    purchaseCost =  purchaseQuantity  *  pricePerBag;
//    solv  1------V----------note bool ret in fcn---------------^-----
    require (msg.value >= purchaseCost); 
    totalSpent = totalSpent +purchaseCost;
    bagsBought = bagsBought  + purchaseQuantity;
    bagsSold = bagsSold + purchaseQuantity;
  }
 //------------------------------------------------Bank Balance----
function bankBalance(string hitme) public view returns (uint) {
    return this.balance;
}
//----------------------------------------------------Total Bought
function HowManyBought(string hitme) public view returns (uint) {
    return bagsBought;
}
//--------------------------------------new-------------Price now
function CurrentPrice(string hitme) public view returns (uint) {
    return pricePerBag;
}
//------------------------------------------------------Tot spent
function HowMuchSpent(string hitme) public view returns (uint) {
    return totalSpent;
}
//------------------------------------------------------Tot spent
function CurrentCustomer(string hitme) public view returns (address) {
    return msg.sender;
}
//--------------------------------------------------------total sold
function TotalbagsSold(string hitme) public view returns (uint) {
    return bagsSold;
}
 
//-------------------------------------------------------change price
//----solv 3------- onlyOwner added
function setPrice(uint pricePerBagNew) public  onlyOwner {
    pricePerBag = pricePerBagNew;
  }
  
// ---------------------------------------------Empty the Bank 
//----solv -2------ onlyOwner added
function clearBank(string hitme) public onlyOwner returns (uint) {
   owner.transfer(this.balance);
    
}
}

